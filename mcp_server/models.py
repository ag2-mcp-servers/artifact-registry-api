# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:56:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class PackageType(Enum):
    PACKAGE_TYPE_UNSPECIFIED = 'PACKAGE_TYPE_UNSPECIFIED'
    BINARY = 'BINARY'
    SOURCE = 'SOURCE'


class AptArtifact(BaseModel):
    architecture: Optional[str] = Field(
        None, description='Output only. Operating system architecture of the artifact.'
    )
    component: Optional[str] = Field(
        None, description='Output only. Repository component of the artifact.'
    )
    controlFile: Optional[str] = Field(
        None,
        description="Output only. Contents of the artifact's control metadata file.",
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The Artifact Registry resource name of the artifact.',
    )
    packageName: Optional[str] = Field(
        None, description='Output only. The Apt package name of the artifact.'
    )
    packageType: Optional[PackageType] = Field(
        None, description='Output only. An artifact is a binary or source package.'
    )


class Empty(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class Type(Enum):
    HASH_TYPE_UNSPECIFIED = 'HASH_TYPE_UNSPECIFIED'
    SHA256 = 'SHA256'
    MD5 = 'MD5'


class Hash(BaseModel):
    type: Optional[Type] = Field(
        None, description='The algorithm used to compute the hash value.'
    )
    value: Optional[str] = Field(None, description='The hash value.')


class ImportAptArtifactsGcsSource(BaseModel):
    uris: Optional[List[str]] = Field(
        None, description='Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
    )
    useWildcards: Optional[bool] = Field(
        None,
        description='Supports URI wildcards for matching multiple objects from a single URI.',
    )


class ImportAptArtifactsMetadata(BaseModel):
    pass


class ImportAptArtifactsRequest(BaseModel):
    gcsSource: Optional[ImportAptArtifactsGcsSource] = Field(
        None,
        description='Google Cloud Storage location where input content is located.',
    )


class ImportYumArtifactsGcsSource(BaseModel):
    uris: Optional[List[str]] = Field(
        None, description='Cloud Storage paths URI (e.g., gs://my_bucket//my_object).'
    )
    useWildcards: Optional[bool] = Field(
        None,
        description='Supports URI wildcards for matching multiple objects from a single URI.',
    )


class ImportYumArtifactsMetadata(BaseModel):
    pass


class ImportYumArtifactsRequest(BaseModel):
    gcsSource: Optional[ImportYumArtifactsGcsSource] = Field(
        None,
        description='Google Cloud Storage location where input content is located.',
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class VersionPolicy(Enum):
    VERSION_POLICY_UNSPECIFIED = 'VERSION_POLICY_UNSPECIFIED'
    RELEASE = 'RELEASE'
    SNAPSHOT = 'SNAPSHOT'


class MavenRepositoryConfig(BaseModel):
    allowSnapshotOverwrites: Optional[bool] = Field(
        None,
        description='The repository with this flag will allow publishing the same snapshot versions.',
    )
    versionPolicy: Optional[VersionPolicy] = Field(
        None,
        description='Version policy defines the versions that the registry will accept.',
    )


class OperationMetadata(BaseModel):
    pass


class Package(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The time when the package was created.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name of the package.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the package, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1". If the package ID part contains slashes, the slashes are escaped.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='The time when the package was last updated. This includes publishing a new version of the package.',
    )


class LegacyRedirectionState(Enum):
    REDIRECTION_STATE_UNSPECIFIED = 'REDIRECTION_STATE_UNSPECIFIED'
    REDIRECTION_FROM_GCR_IO_DISABLED = 'REDIRECTION_FROM_GCR_IO_DISABLED'
    REDIRECTION_FROM_GCR_IO_ENABLED = 'REDIRECTION_FROM_GCR_IO_ENABLED'
    REDIRECTION_FROM_GCR_IO_FINALIZED = 'REDIRECTION_FROM_GCR_IO_FINALIZED'


class ProjectSettings(BaseModel):
    legacyRedirectionState: Optional[LegacyRedirectionState] = Field(
        None,
        description='The redirection state of the legacy repositories in this project.',
    )
    name: Optional[str] = Field(
        None,
        description="The name of the project's settings. Always of the form: projects/{project-id}/projectSettings In update request: never set In response: always set",
    )


class Format(Enum):
    FORMAT_UNSPECIFIED = 'FORMAT_UNSPECIFIED'
    DOCKER = 'DOCKER'
    MAVEN = 'MAVEN'
    NPM = 'NPM'
    APT = 'APT'
    YUM = 'YUM'
    PYTHON = 'PYTHON'


class Repository(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the repository was created.'
    )
    description: Optional[str] = Field(
        None, description='The user-provided description of the repository.'
    )
    format: Optional[Format] = Field(
        None, description='The format of packages that are stored in the repository.'
    )
    kmsKeyName: Optional[str] = Field(
        None,
        description="The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.',
    )
    mavenConfig: Optional[MavenRepositoryConfig] = Field(
        None,
        description='Maven repository config contains repository level configuration for the repositories of maven type.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the repository, for example: "projects/p1/locations/us-central1/repositories/repo1".',
    )
    satisfiesPzs: Optional[bool] = Field(
        None,
        description='Output only. If set, the repository satisfies physical zone separation.',
    )
    sizeBytes: Optional[str] = Field(
        None,
        description='Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the repository was last updated.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Tag(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the tag, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/tags/tag1". If the package part contains slashes, the slashes are escaped. The tag part can only have characters in [a-zA-Z0-9\\-._~:@], anything else must be URL encoded.',
    )
    version: Optional[str] = Field(
        None,
        description='The name of the version the tag refers to, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/sha256:5243811" If the package or version ID parts contain slashes, the slashes are escaped.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class UploadAptArtifactMetadata(BaseModel):
    pass


class UploadAptArtifactRequest(BaseModel):
    pass


class UploadAptArtifactResponse(BaseModel):
    aptArtifacts: Optional[List[AptArtifact]] = Field(
        None, description='The Apt artifacts updated.'
    )


class UploadYumArtifactMetadata(BaseModel):
    pass


class UploadYumArtifactRequest(BaseModel):
    pass


class Version(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The time when the version was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the version, as specified in its metadata.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Output only. Repository-specific Metadata stored against this version. The fields returned are defined by the underlying repository-specific resource. Currently, the resources could be: DockerImage MavenArtifact',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the version, for example: "projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/art1". If the package or version ID parts contain slashes, the slashes are escaped.',
    )
    relatedTags: Optional[List[Tag]] = Field(
        None,
        description='Output only. A list of related tags. Will contain up to 100 tags that reference this version.',
    )
    updateTime: Optional[str] = Field(
        None, description='The time when the version was last updated.'
    )


class YumArtifact(BaseModel):
    architecture: Optional[str] = Field(
        None, description='Output only. Operating system architecture of the artifact.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The Artifact Registry resource name of the artifact.',
    )
    packageName: Optional[str] = Field(
        None, description='Output only. The yum package name of the artifact.'
    )
    packageType: Optional[PackageType] = Field(
        None, description='Output only. An artifact is a binary or source package.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    VERSION_VIEW_UNSPECIFIED = 'VERSION_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleDevtoolsArtifactregistryV1beta2File(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the File was created.'
    )
    hashes: Optional[List[Hash]] = Field(
        None, description='The hashes of the file content.'
    )
    name: Optional[str] = Field(
        None,
        description='The name of the file, for example: "projects/p1/locations/us-central1/repositories/repo1/files/a%2Fb%2Fc.txt". If the file ID part contains slashes, they are escaped.',
    )
    owner: Optional[str] = Field(
        None,
        description='The name of the Package or Version that owns this file, if any.',
    )
    sizeBytes: Optional[str] = Field(None, description='The size of the File in bytes.')
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the File was last updated.'
    )


class ImportAptArtifactsErrorInfo(BaseModel):
    error: Optional[Status] = Field(None, description='The detailed error status.')
    gcsSource: Optional[ImportAptArtifactsGcsSource] = Field(
        None, description='Google Cloud Storage location requested.'
    )


class ImportAptArtifactsResponse(BaseModel):
    aptArtifacts: Optional[List[AptArtifact]] = Field(
        None, description='The Apt artifacts imported.'
    )
    errors: Optional[List[ImportAptArtifactsErrorInfo]] = Field(
        None, description='Detailed error info for packages that were not imported.'
    )


class ImportYumArtifactsErrorInfo(BaseModel):
    error: Optional[Status] = Field(None, description='The detailed error status.')
    gcsSource: Optional[ImportYumArtifactsGcsSource] = Field(
        None, description='Google Cloud Storage location requested.'
    )


class ImportYumArtifactsResponse(BaseModel):
    errors: Optional[List[ImportYumArtifactsErrorInfo]] = Field(
        None, description='Detailed error info for packages that were not imported.'
    )
    yumArtifacts: Optional[List[YumArtifact]] = Field(
        None, description='The yum artifacts imported.'
    )


class ListFilesResponse(BaseModel):
    files: Optional[List[GoogleDevtoolsArtifactregistryV1beta2File]] = Field(
        None, description='The files returned.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to retrieve the next page of files, or empty if there are no more files to return.',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListPackagesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to retrieve the next page of packages, or empty if there are no more packages to return.',
    )
    packages: Optional[List[Package]] = Field(
        None, description='The packages returned.'
    )


class ListRepositoriesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to retrieve the next page of repositories, or empty if there are no more repositories to return.',
    )
    repositories: Optional[List[Repository]] = Field(
        None, description='The repositories returned.'
    )


class ListTagsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to retrieve the next page of tags, or empty if there are no more tags to return.',
    )
    tags: Optional[List[Tag]] = Field(None, description='The tags returned.')


class ListVersionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to retrieve the next page of versions, or empty if there are no more versions to return.',
    )
    versions: Optional[List[Version]] = Field(
        None, description='The versions returned.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )


class UploadAptArtifactMediaResponse(BaseModel):
    operation: Optional[Operation] = Field(
        None, description='Operation to be returned to the user.'
    )


class UploadYumArtifactMediaResponse(BaseModel):
    operation: Optional[Operation] = Field(
        None, description='Operation to be returned to the user.'
    )


class UploadYumArtifactResponse(BaseModel):
    yumArtifacts: Optional[List[YumArtifact]] = Field(
        None, description='The Apt artifacts updated.'
    )
